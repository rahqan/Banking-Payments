// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dummy_api.Context;

#nullable disable

namespace dummy_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dummy_api.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Code = "ADM001",
                            Email = "alice@banking.com",
                            Name = "Alice Johnson",
                            Password = "Pass@123"
                        },
                        new
                        {
                            AdminId = 2,
                            Code = "ADM002",
                            Email = "bob@banking.com",
                            Name = "Bob Smith",
                            Password = "Pass@123"
                        },
                        new
                        {
                            AdminId = 3,
                            Code = "ADM003",
                            Email = "charlie@banking.com",
                            Name = "Charlie Brown",
                            Password = "Pass@123"
                        });
                });

            modelBuilder.Entity("dummy_api.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankId");

                    b.HasIndex("AdminId");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            BankId = 1,
                            Address = "123 Finance St",
                            AdminId = 1,
                            Code = "B001",
                            ContactEmail = "info@fnb.com",
                            ContactPhone = "1234567890",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "First National Bank",
                            PanNumber = "AAAPL1234C",
                            RegistrationNumber = "REG001"
                        },
                        new
                        {
                            BankId = 2,
                            Address = "456 Trust Ave",
                            AdminId = 2,
                            Code = "B002",
                            ContactEmail = "contact@gtb.com",
                            ContactPhone = "9876543210",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Global Trust Bank",
                            PanNumber = "BBBTY4567P",
                            RegistrationNumber = "REG002"
                        },
                        new
                        {
                            BankId = 3,
                            Address = "789 Metro Rd",
                            AdminId = 3,
                            Code = "B003",
                            ContactEmail = "support@mfb.com",
                            ContactPhone = "5647382910",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Metro Finance Bank",
                            PanNumber = "CCCXY7890K",
                            RegistrationNumber = "REG003"
                        });
                });

            modelBuilder.Entity("dummy_api.Models.BankUser", b =>
                {
                    b.Property<int>("BankUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankUserId"));

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankUserId");

                    b.HasIndex("BankId");

                    b.ToTable("BankUsers");

                    b.HasData(
                        new
                        {
                            BankUserId = 1,
                            BankId = 1,
                            Code = "BU001",
                            Email = "emma@fnb.com",
                            Name = "Emma Green",
                            Password = "123456",
                            PhoneNumber = "9876543210"
                        },
                        new
                        {
                            BankUserId = 2,
                            BankId = 2,
                            Code = "BU002",
                            Email = "liam@gtb.com",
                            Name = "Liam Gray",
                            Password = "123456",
                            PhoneNumber = "8765432109"
                        },
                        new
                        {
                            BankUserId = 3,
                            BankId = 3,
                            Code = "BU003",
                            Email = "olivia@mfb.com",
                            Name = "Olivia White",
                            Password = "123456",
                            PhoneNumber = "7654321098"
                        });
                });

            modelBuilder.Entity("dummy_api.Models.Beneficiary", b =>
                {
                    b.Property<int>("BeneficiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeneficiaryId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId1")
                        .HasColumnType("int");

                    b.Property<string>("IfscCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BeneficiaryId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientId1");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("dummy_api.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BankUserId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.HasIndex("BankId");

                    b.HasIndex("BankUserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("dummy_api.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("BankUserId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DocType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.HasIndex("BankUserId");

                    b.HasIndex("ClientId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("dummy_api.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IfscCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("dummy_api.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankUserId")
                        .HasColumnType("int");

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("BeneficiaryId1")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("BankUserId");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("BeneficiaryId1");

                    b.HasIndex("ClientId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("dummy_api.Models.SalaryDisbursement", b =>
                {
                    b.Property<int>("SalaryDisbursementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryDisbursementId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("SalaryDisbursementId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SalaryDisbursements");
                });

            modelBuilder.Entity("dummy_api.Models.Bank", b =>
                {
                    b.HasOne("dummy_api.Models.Admin", "Admin")
                        .WithMany("Banks")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("dummy_api.Models.BankUser", b =>
                {
                    b.HasOne("dummy_api.Models.Bank", "Bank")
                        .WithMany("BankUsers")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("dummy_api.Models.Beneficiary", b =>
                {
                    b.HasOne("dummy_api.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("dummy_api.Models.Client", null)
                        .WithMany("Beneficiaries")
                        .HasForeignKey("ClientId1");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("dummy_api.Models.Client", b =>
                {
                    b.HasOne("dummy_api.Models.Bank", "Bank")
                        .WithMany("Clients")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("dummy_api.Models.BankUser", "BankUser")
                        .WithMany("Clients")
                        .HasForeignKey("BankUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("BankUser");
                });

            modelBuilder.Entity("dummy_api.Models.Document", b =>
                {
                    b.HasOne("dummy_api.Models.BankUser", "UploadedBy")
                        .WithMany("Documents")
                        .HasForeignKey("BankUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dummy_api.Models.Client", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("dummy_api.Models.Employee", b =>
                {
                    b.HasOne("dummy_api.Models.Client", "Client")
                        .WithMany("Employees")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("dummy_api.Models.Payment", b =>
                {
                    b.HasOne("dummy_api.Models.BankUser", "ApprovedBy")
                        .WithMany("Payments")
                        .HasForeignKey("BankUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dummy_api.Models.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dummy_api.Models.Beneficiary", null)
                        .WithMany("Payments")
                        .HasForeignKey("BeneficiaryId1");

                    b.HasOne("dummy_api.Models.Client", "Client")
                        .WithMany("Payments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Beneficiary");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("dummy_api.Models.SalaryDisbursement", b =>
                {
                    b.HasOne("dummy_api.Models.Client", "Client")
                        .WithMany("SalaryDisbursement")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dummy_api.Models.Employee", "Employee")
                        .WithMany("SalaryDisbursements")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("dummy_api.Models.Admin", b =>
                {
                    b.Navigation("Banks");
                });

            modelBuilder.Entity("dummy_api.Models.Bank", b =>
                {
                    b.Navigation("BankUsers");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("dummy_api.Models.BankUser", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Documents");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("dummy_api.Models.Beneficiary", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("dummy_api.Models.Client", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("Documents");

                    b.Navigation("Employees");

                    b.Navigation("Payments");

                    b.Navigation("SalaryDisbursement");
                });

            modelBuilder.Entity("dummy_api.Models.Employee", b =>
                {
                    b.Navigation("SalaryDisbursements");
                });
#pragma warning restore 612, 618
        }
    }
}
